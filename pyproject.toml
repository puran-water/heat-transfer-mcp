[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "heat-transfer-mcp"
version = "1.0.0"
description = "MCP server for thermal engineering calculations with automatic unit conversion"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "hvkshetry", email = "hvkshetry@gmail.com"}
]
keywords = ["mcp", "heat-transfer", "thermal-engineering", "unit-conversion", "wastewater"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Physics",
]
requires-python = ">=3.10"
dependencies = [
    "mcp>=0.5.0",
    "fastmcp>=0.1.0",
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "ht>=1.0.2",
    "chemicals>=1.1.0",
    "fluids>=1.0.26",
    "thermo>=0.3.0",
    "pint>=0.20.0",
    "meteostat>=1.6.8",
    "pandas>=2.0.0",
    "pytz>=2021.1",
    "requests>=2.28.0",
    "cachetools>=5.3.0",
    "python-dotenv>=0.19.0",
    "rich>=10.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.20.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/puran-water/heat-transfer-mcp"
Repository = "https://github.com/puran-water/heat-transfer-mcp"
Issues = "https://github.com/puran-water/heat-transfer-mcp/issues"

[tool.setuptools.packages.find]
include = ["tools*", "utils*"]

[tool.black]
line-length = 127
target-version = ['py310']
include = '\.pyi?$'

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true

[tool.coverage.run]
source = ["tools", "utils", "server"]
omit = ["tests/*", "archive/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]